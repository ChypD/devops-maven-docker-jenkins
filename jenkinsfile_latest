pipeline {
    agent any  // Use any available Jenkins agent

    tools {
        maven 'mvn'  // Maven tool configured in Jenkins
    }

    parameters {
        string(name: 'IMAGE_NAME', defaultValue: 'image-name', description: 'Docker Image Name')  // Image name parameter
        string(name: 'CONTAINER_NAME', defaultValue: 'mynewcontainer', description: 'Docker Container Name')  // Container name parameter
        string(name: 'PORT_MAPPING', defaultValue: '8082:8080', description: 'Port Mapping for Docker')  // Port mapping parameter
    }

    environment {
        // Get the short hash of the current Git commit for versioning
        ARTIFACT_VERSION = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    stages {
        // Maven Build Stage
        stage('Build') {
            steps {
                echo 'Starting Maven Build...'
                retry(3) {  // Retry the build step 3 times if it fails
                    timeout(time: 5, unit: 'MINUTES') {  // Set a timeout of 5 minutes
                        sh 'mvn clean package'  // Execute Maven clean and package commands
                    }
                }
            }
        }

        // Docker Cleanup Stage
        stage('Docker Cleanup') {
            steps {
                echo 'Cleaning up old Docker containers and images...'
                script {
                    // Check if the container exists and remove it
                    def existingContainer = sh(script: "docker ps -aqf 'name=${params.CONTAINER_NAME}'", returnStdout: true).trim()
                    if (existingContainer) {
                        sh "docker rm -f ${params.CONTAINER_NAME}"
                    }

                    // Check if the Docker image exists and remove it
                    def existingImage = sh(script: "docker images -q ${params.IMAGE_NAME}:${ARTIFACT_VERSION}", returnStdout: true).trim()
                    if (existingImage) {
                        sh "docker rmi ${params.IMAGE_NAME}:${ARTIFACT_VERSION}"
                    }
                }
            }
        }

        // Docker Build Stage
        stage('Docker Build') {
            steps {
                echo 'Building Docker Image...'
                retry(2) {  // Retry the Docker build step 2 times if it fails
                    timeout(time: 10, unit: 'MINUTES') {  // Set a timeout of 10 minutes
                        sh "docker build -t ${params.IMAGE_NAME}:${ARTIFACT_VERSION} ."  // Build Docker image
                    }
                }
            }
        }

        // Deploy Confirmation Stage
        stage('Deploy Confirmation') {
            steps {
                script {
                    // User confirmation before deployment
                    input(message: 'Deploy the Docker container?', ok: 'Yes, Deploy')
                }
            }
        }

        // Docker Deploy Stage
        stage('Deploy') {
            steps {
                echo 'Deploying Docker Container...'
                // Use Jenkins credentials for Docker login
                withCredentials([usernamePassword(credentialsId: 'DOCKER_CREDENTIALS', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        echo 'Logging in to Docker registry...'
                        sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'  // Perform Docker login
                        retry(2) {  // Retry the run step 2 times if it fails
                            timeout(time: 5, unit: 'MINUTES') {  // Set a timeout of 5 minutes
                                // Run the Docker container with specified port mapping and name
                                sh "docker run -d -p ${params.PORT_MAPPING} --name ${params.CONTAINER_NAME} ${params.IMAGE_NAME}:${ARTIFACT_VERSION}"
                            }
                        }
                    }
                }
            }
        }

        // Health Check Stage
        stage('Health Check') {
            steps {
                echo 'Performing Health Check...'
                retry(3) {  // Retry health check 3 times if it fails
                    timeout(time: 3, unit: 'MINUTES') {  // Set a timeout of 3 minutes
                        script {
                            // Inspect the health status of the container
                            def healthStatus = sh(script: "docker inspect --format='{{.State.Health.Status}}' ${params.CONTAINER_NAME}", returnStdout: true).trim()
                            if (healthStatus != 'healthy') {
                                error "Health Check Failed: Container is not healthy."  // Throw an error if not healthy
                            } else {
                                echo "Container is healthy and running."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        // Post build actions
        success {
            echo 'Pipeline completed successfully.'  // Success message
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'  // Failure message
        }
    }
}
